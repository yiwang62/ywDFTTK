#!/bin/tcsh
#
set s = "`pwd`"
set h = $s:t
unalias mv
unalias rm
unalias cp
set www = `pwd`

set lthr = 1
set ethr = 10000

set OFILE = "OSZICAR"
set CFILE = "CONTCAR"
set SFILE = "CONTCAR.savcon"
set ZFILE = "OSZICAR.savcon"
set outcar = "OUTCAR"

set phases = "$1"
set nonomatch
shift

foreach o ( $* )
  if (x$1 == "x-workdir") then
    shift
    set workdir = "$1"
    if ( "$#argv" != 0 ) shift
    continue
  else if (x$1 == "x-CONTCAR") then
    shift
    set contcar = "$1"
    if ( "$#argv" != 0 ) shift
    continue
  else if (x$1 == "x-rerun") then
    shift
    set rerun
    continue
  else if (x$1 == "x-estimate") then
    shift
    set estimate
    continue
  else if (x$1 == "x-Static") then
    shift
    set Static
    continue
  else if (x$1 == "x-OSZICAR") then
    shift
    set oszicar = "$1"
    if ( "$#argv" != 0 ) shift
    continue
  else if (x$1 == "x-lthr") then
    shift
    set lthr = "$1"
    if ( "$#argv" != 0 ) shift
    continue
  else if (x$1 == "x-ethr") then
    shift
    set ethr = "$1"
    if ( "$#argv" != 0 ) shift
    continue
  else
    if ( "$#argv" != 0 ) shift
  endif
end

set rejob = "rejob.dat"

echo -n >$www/$rejob
foreach dir ( $phases )
  cd $www/$dir
  if ( ! -e tplate ) continue
#foreach dir ( V*/PBEsol/ )
#foreach dir ( tI6*/PBEsol/ )
#check if there updated calculated resuts by comparing the time update by cbak

    set newosz = ""
    #set WWWW = /global/project/projectdirs/m891/yiwang62
    #set tdir0 =  $SCRATCH/`pwd | sed "s|$WWWW|prj|g;s|/|_|g"`
    #set tdir0 =  $SCRATCH/`pwd | sed "s|/|_|g;s|_global_project_projectdirs_m891_yiwang62|prj|g"`
        set PRJ = ""
        if ( $?WORKPRJ ) then
          set PRJ = "$WORKPRJ"
        endif
        set tdir0 =  $SCRATCH/`pwd | sed "s|$HOME/||g;s|$WORK/|$PRJ|g;s|/|_|g"`
#
    foreach d ( V* )
        set tmpdir = "$tdir0"_"$d"
        set oszicar =  $tmpdir/OSZICAR

        if ( -e $oszicar ) then
            if ( -e $d/OSZICAR ) then
              if ( "`stat -c %Y $d/OSZICAR`" >= "`stat -c %Y $oszicar`" ) continue
            endif

              set line = `grep "E0=" -a $oszicar -n | tail -1`
              if ( "$line" == "" ) continue
              set n1 = `echo $line | sed 's/:/ /g' | awk '{print $1}'`
              @ n1 = "$n1" - 1
	      set line1 = `head -$n1 $oszicar | tail -1`
#         echo "line1=$line1"
              #set ddE = `echo $line1 | awk '{print $5}'`
              set ddE = `echo $line1 | awk '{print $4}' | sed 's/^-//g' | sed 's/E-/-/g' | sed 's/-/E-/g'`
              set dE = `ari -n -f %.0f $ddE x  $ethr | tr -d '-'`
              if ( "$dE" != 0 ) then
                echo "not convergent electronic step" >>$d/Convergence
                continue
              else
                echo "convergent electronic step" >>$d/Convergence
              endif

              set newosz = "yes"
          #echo "`pwd` copied back"

              set contcar = "$tmpdir/CONTCAR"
#          set tfile = "$tmpdir/OUTCAR"
              if ( -e $contcar ) then
                if ( ! -z $contcar ) then
                  set nl = `wc -l <$contcar`
                  if ( "$nl" > 9 ) then
                    cp $contcar $d/.
                    cp $oszicar $d/.
                  endif
                endif
              endif
        endif

        set toutcar =  $tmpdir/OUTCAR
        set tdoscar =  $tmpdir/DOSCAR

        if ( -e $toutcar ) then
        if ( ! -z $toutcar ) then
            set dif = `stat -c %Y $toutcar`
            if ( -e $outcar ) then
              set t1 = `stat -c %Y OUTCAR`
              @ dif =  "$t1" - "$dif"
            else
              set dif = -1
            endif

            if ( "$dif" < 0 ) then
              set enmax = `grep ENMAX $toutcar | tr -d ';' | sort -k3 -n | tail -1 | awk '{print $3}' | sort -n | tail -1`
              set encut = `grep ENCUT $toutcar | tr -d ';' | awk '{print $3}' | sort -n | tail -1`
              set ismear = `grep SMEAR $toutcar | tr -d ';' | awk '{print $3}' | sort -n | tail -1`

if ( -e tplate/INCAR.Static ) then
  set en0 = `grep ENCUT tplate/INCAR.Static | sed "s/ENCUT//;s/=//"`
  set high = `ari -n -f %.0f $encut - $en0 / $enmax x 100 +25.01`
else
  set high = `ari -n -f %.0f $encut - $enmax / $enmax x 100`
endif
              if ( ("$high" >= "25") && ("$ismear" == "-5") ) then

      		if ( -e $tdoscar ) then
         	  if ( ! -z $tdoscar ) then
            	    set dif = `stat -c %Y $tdoscar`
            	    set set ndos1 = `wc -l <$tdoscar`
            	    if ( ( -e $d/DOSCAR ) && ( ! -z $d/DOSCAR ) ) then
              	      if ( "$ndos1" > 400 ) then
                	set t1 = `stat -c %Y $d/DOSCAR`
                	@ dif =  "$t1" - "$dif"
              	      endif
            	    else
              	      if ( "$ndos1" > 400 ) then
                        set dif = -1
              	      endif
            	    endif

            	    if ( "$dif" < 0 ) then
                      cp $toutcar $d/.
              	      cp $tdoscar $d/.
            	    endif
          	  endif
                endif
              endif
            endif
        endif
        endif
    end
#
      set newf = `ls -t V*/OSZICAR| & head -n1 | & awk '{print $1}'`
      if ( "$newf" != "ls:" ) then
        set t0 = 0
        if ( -e used22.dat ) set t0 = `stat -c %Y used22.dat`
        if ( "`stat -c %Y $newf`" >= "$t0" ) then
          set newosz = "yes"
        endif
      endif
    endif
      

if ( 1 == -1 ) then
    foreach d ( V* )
      if ( -e $d/OSZICAR ) then
        if ( "`stat -c %Y $d/OSZICAR`" >= "$t0" ) then
          set newosz = "yes"
          break
        endif
      endif
    end
endif


    if ( ! $?estimate ) then
    if ( "$newosz" == "" ) then
      if ( -e vaspcon.out && ! $?rerun ) then 
        cat vaspcon.out
        continue
      endif
      goto nonewosz
    endif
    endif

      #if yes, remake the frun22 file
      echo -n >frun22.dat
      foreach d ( V* )
        if ( $?estimate ) then
          #if ( -e $d/StaticConvergent ) continue
        endif
        set ee = `echo $d | tr -d 'V'`

        set ofi = $d/$OFILE
        set ofc = $d/$CFILE
        set ofs = $d/$SFILE
        set ofz = $d/$ZFILE

        if ( -e $ofi ) then

          set line = `grep "E0=" -a $ofi -n | tail -1`
          if ( "$line" == "" ) continue
  set n4 = `grep "E0=" $ofi | tail -1 | awk '{print $4}'`
  if ( "$n4" != "E0=" ) then
    rm $ofi
    continue
  endif
          set ddE = `echo $line | awk '{print $9}' | sed "s/=//g"`
          set dE = `ari -n -f %.0f $ddE x  $lthr | tr -d '-'`

          set n1 = `echo $line | sed 's/:/ /g' | awk '{print $1}'`
          #set n1 = `echo $line | awk '{print $1}' | sed 's/://g'`
          if ( "$dE" != 0 ) then
            set n3 = `grep "E0=" -a $ofi | wc -l`
            if ( "$n3" != 1 ) then
              echo "not convergent ionic step" >>$d/Convergence
              continue
            endif
            set n2 = `wc -l <$ofi`
            if ( "$n1" != "$n2" ) then
              echo "not convergent ionic step" >>$d/Convergence
              continue
            endif
          endif

          @ n1 = "$n1" - 1
	  set line1 = "`head -$n1 $ofi | tail -1`"
          set ddE = `echo $line1 | awk '{print $4}' | sed 's/^-//g' | sed 's/E-/-/g' | sed 's/-/E-/g'`
          set dE = `ari -n -f %.0f $ddE x  $ethr | tr -d '-'`
          if ( "$dE" != 0 ) then
            echo "not convergent electronic step" >>$d/Convergence
            continue
          else
            echo "convergent ionic step" >>$d/Convergence
          endif
          set et = `echo $line | awk '{print $6}'`

          if ( -e $ofc ) then
          if ( ! -z $ofc ) then
            set nl = `wc -l <$ofc`
            if ( "$nl" <= 9 ) continue

            set line = `head -7 $ofc | tail -1`
            set natom = `echo $line | awk '{ nn=0; for (i=1; i<=NF; i++) nn += $i; print nn;}'`
            set tmp = `vasp_volume <$ofc`
            set v = `ari -n $tmp / $natom`
            #set e = `ari -n $et/$natom`
            set e = `ari -n $et/$natom |& awk '{print $1}'`
            #echo awk $e
            if ( "$e" == "" ) then
              rm $ofi
              continue
            endif
	    echo "$v $e $ee" >>frun22.dat
            cp $ofi $ofz
            cp $ofc $ofs
          endif
          endif
        endif
      end

	set frun22 = "frun22.dat"
	set line0 = "`sort -k2 -g $frun22 | head -1`"
	set em = `echo $line0 | cut -d " " -f 2`
        set i = `grep "$line0" $frun22 -n | sed 's/:/ /g' | cut -d " " -f 1`

	while ( "$i" > 1 )
	  @ i = "$i" - 1
	  set line = `sed "${i}q;d" $frun22`
	  set ex = `echo $line | cut -d " " -f 2`
	  set de = `ari -n -f %6.0f $ex - $em x 1000000`
	  if ( "$de" > 0 ) then
	    set em = "$ex"
	  else
	    @ i = "$i" + 1
	    break
	  endif
	end
	tail +$i $frun22 >frun22.tmp
        mv frun22.tmp frun22.dat

#echo `pwd` 22
    set nl = 0
    if ( -e frun22.dat ) set nl = `wc -l <frun22.dat`
    set y0 = 0
    set y1 = 0
    if ( -e used22.dat ) rm used22.dat
    if ( "$nl" > 4 ) then
      #if frun22 has more than 4 lines, it could have minima
      set x = `sort -k2,2g  frun22.dat | head -1 | cut -d " " -f 3`
      echo -n > used22.dat
      set ii = 1
      while ( "$ii" <= "$nl" )
        set line = `sed "${ii}q;d" frun22.dat`
        set ee = `echo $line | cut -d " " -f 3`
        set y = `ari -n -f %6.0f $ee - $x /0.02`
        if ( "$y" > 4 ) break
        if ( "$y" >= -2 && "$y" <= 4 ) then
          if ( "$y" < "$y0" ) set y0 = "$y"
          if ( "$y" > "$y1" ) set y1 = "$y"
	  echo "$line" >>used22.dat
        endif
        @ ii = "$ii" + 1
      end
      @ y01 = "$y1" - "$y0" + 1
      set n2 = `wc -l <used22.dat`
      if ( "$n2" < 5 ) set y0 = 0
      #if ( "$n2" != "$y01" ) set y0 = 0
    endif

#echo 2
    set y01 = `ari -n -f %4.0f $y0 x $y1`
  #echo `pwd` $nl $y01 $y0 $y1
    if ( "$y01" >= 0 ) then
      if ( -e used22.dat ) rm used22.dat
      echo $dir : not convergent either by ionic or electronic step >>$www/$rejob
    endif

nonewosz:

    if ( ! -e used22.dat ) then
      if ( $?estimate ) then
        if ( -e frun22.dat ) then
            set g0 = `sort -k2,2g frun22.dat | head -1 | cut -d " " -f 2`
            echo "$dir $g0 : ERROR! Minimum in the end point"
        else
            echo "$dir : ERROR! NN RESULTS"
        endif
      endif
      continue
    endif
      set ndata = `wc -l <used22.dat`
      if ( "$ndata" > 4 ) then
        set l0 = `head -1 used22.dat | cut -d " " -f 3`
        set l1 = `tail -1 used22.dat | cut -d " " -f 3`
        set ln = `ari -n -f %4.0f $ndata - 1`
        #set ld = `ari -n $l1 - $l0/ $ln`
        set ld = `grep "foreach ee (" crun | tail -1 | awk '{print $5-$4}'`
  #echo `pwd` $nl $y01
        set abort = `YWfit -Morse -calmin < used22.dat >&../t.m.p.file1`
        #YWfit -BMvol4 -calmin < used22.dat >&../t.m.p.file1
        #YWfit -BMvol -calmin < used22.dat >&../t.m.p.file1
        set ERROR = `grep ERROR ../t.m.p.file1`
        if ( "$ERROR" == "" ) then
          set err = `grep "The average absolute deviation is" ../t.m.p.file1 | awk '{print $6}'`
          set energy = `grep "ymin=" ../t.m.p.file1 | awk '{print $5}'`
          set energy = `ari -n -f %.6f $energy`
          if ( $?estimate ) then
            set g0 = `sort -k2,2g used22.dat | head -1 | cut -d " " -f 2`
            echo "$dir $g0 : $ndata $l0 $l1 $ld err= $err $energy $ERROR"
          else
            echo "$dir : $ndata $l0 $l1 $ld err= $err $energy $ERROR"
            echo "$dir : $ndata $l0 $l1 $ld err= $err $energy $ERROR" >vaspcon.out
          endif
        else
          if ( $?estimate ) then
            set g0 = `sort -k2,2g used22.dat | head -1 | cut -d " " -f 2`
            echo "$dir $g0 : $ndata $l0 $l1 $ld : fitting ERROR"
          else
            echo $dir : fitting ERROR
          endif
          if ( -e vaspcon.out ) rm vaspcon.out
          rm used22.dat
        endif
      else
        if ( -e vaspcon.out ) rm vaspcon.out
        rm used22.dat
        echo $dir : not convergent either by ionic or electronic step >>$www/$rejob
      endif
#echo 3
end
