#!/bin/csh -f
#

unalias rm
unalias cp
unalias mv
set nonomatch

set lattice = _LATTICE
set UtoGPa = "1.60217646e2"

set print_full = 0
set ECmode = semi_phonon
set TVfile = E/thermo-E*/vdos_e_fvib

foreach option ( $* )
  if (x$1 == "x-h") then
  else if (x$1 == "x-f") then
    set print_full = 1
    shift
    continue
  else if (x$1 == "x-ECmode") then
    shift
    set ECmode = "$1"
    shift
    continue
  else if (x$1 == "x-TV") then
    shift
    set TVfile = "$1"
    shift
    continue
  else if ($#argv == "0") then
    break
  endif
end

set line = `head -6 E/*/vol_0/POSCAR.static | tail -1`
set natom = `echo $line | awk '{ nn=0; for (i=1; i<=NF; i++) nn += $i; print nn;}'`

echo -n >t.m.p.file

foreach dir ( E/*/vol* )
    set pfile = $dir/POSCAR.static
    set efile = $dir/OSZICAR.static
    set ofile = $dir/OUTCAR.static.gz
    set vdir = $dir:t

if ( -e $ofile && ! (-z $ofile) ) then

        set tmp = `vasp_volume <$pfile`
        set vol0 = `ari -n $tmp/$natom`
        set tmp = `grep "E0=" $efile | tail -1 | awk '{print $5}'`
        set ene0 = `ari -n $tmp/$natom`
#        zcat $ofile | awk -F\\n "/  in kB /,/external pressure =/" \
#        | tail -2 | grep "  in kB" | sed "s/  in kB //g" >t.m.p.str
        zcat $ofile | grep "  in kB" | tail -1 >t.m.p.str
        set s1E = `awk '{print $3}' t.m.p.str`
        set s2E = `awk '{print $4}' t.m.p.str`
        set s3E = `awk '{print $5}' t.m.p.str`
        set s4E = `awk '{print $7}' t.m.p.str`
        set s5E = `awk '{print $8}' t.m.p.str`
        set s6E = `awk '{print $6}' t.m.p.str`

    if ( "$s1E" == "" ) then
        echo "******** $ofile IS NOT COMPLETE!"
        set s1E = "0.0"
        set s2E = "0.0"
        set s3E = "0.0"
        set s4E = "0.0"
        set s5E = "0.0"
        set s6E = "0.0"
    endif


    printf "%10.6lf %11.6lf" "$vol0" "$ene0" >>t.m.p.file


foreach hh ( STRAIN_TYPE )

set nn = 0
set CC1 = 0.0
set CC2 = 0.0
set CC3 = 0.0
set CC4 = 0.0
set CC5 = 0.0
set CC6 = 0.0

foreach ee ( STRAIN_LIST )
    set d = X"$hh""$ee"/*/$vdir
    set ofile = $d/OUTCAR.static.gz
    if ( ! ( -e $ofile ) ) then
        echo '********' `pwd`/$d IS NOT DONE
        set WARNING
    endif


    if ( -e $ofile && ! (-z $ofile) ) then
#        zcat $ofile | awk -F\\n "/  in kB /,/external pressure =/" \
#        | tail -2 | grep "  in kB" | sed "s/  in kB //g" >t.m.p.str
        zcat $ofile | grep "  in kB" | tail -1 >t.m.p.str
        set s1 = `awk '{print $3}' t.m.p.str`
        set s2 = `awk '{print $4}' t.m.p.str`
        set s3 = `awk '{print $5}' t.m.p.str`
        set s4 = `awk '{print $7}' t.m.p.str`
        set s5 = `awk '{print $8}' t.m.p.str`
        set s6 = `awk '{print $6}' t.m.p.str`
    else
        set s1 = "0.0"
        set s2 = "0.0"
        set s3 = "0.0" 
        set s4 = "0.0"
        set s5 = "0.0"
        set s6 = "0.0" 
    endif

    if ( "$s1" == "" ) then
        echo "******** $ofile IS NOT COMPLETE!"
        set s1 = "0.0"
        set s2 = "0.0"
        set s3 = "0.0"
        set s4 = "0.0"
        set s5 = "0.0"
        set s6 = "0.0"
    endif

        @ nn = "$nn" + 1
        set CC1 = `ari -n $s1 - $s1E /$ee + $CC1`
        set CC2 = `ari -n $s2 - $s2E /$ee + $CC2`
        set CC3 = `ari -n $s3 - $s3E /$ee + $CC3`
        set CC4 = `ari -n $s4 - $s4E /$ee + $CC4`
        set CC5 = `ari -n $s5 - $s5E /$ee + $CC5`
        set CC6 = `ari -n $s6 - $s6E /$ee + $CC6`

end

        set C1 = `ari -n $CC1 / $nn x -0.1`
        set C2 = `ari -n $CC2 / $nn x -0.1`
        set C3 = `ari -n $CC3 / $nn x -0.1`
        set C4 = `ari -n $CC4 / $nn x -0.1`
        set C5 = `ari -n $CC5 / $nn x -0.1`
        set C6 = `ari -n $CC6 / $nn x -0.1`
        printf " %4s %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf" \
               "$hh" "$C1" "$C2" "$C3" "$C4" "$C5" "$C6" >>t.m.p.file

end

    printf "\n" >>t.m.p.file

endif

end


if ("$print_full" == "1") then
    sort -k 1 -n t.m.p.file
endif

#    printf "%10.6lf %11.6lf" "$vol0" "$ene0" >>t.m.p.file
#        printf " %4s %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf" \
#               "$hh" "$C1" "$C2" "$C3" "$C4" "$C5" "$C6" >>t.m.p.file

if ("$lattice" == "cub") then
    echo "#Volume energy C11 C12 C44"
    sort -k 1 -n t.m.p.file | awk '{printf "%10.6lf %11.6lf %10.4lf %10.4lf %10.4lf\n", $1, $2, $4, $5, $14}' >c.l.d.file
else if ("$lattice" == "hex") then
    echo "#Volume energy C11 C12 C13 C33 C44"
    sort -k 1 -n t.m.p.file | awk '{printf "%10.6lf %11.6lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf\n", $1, $2, $4, $5, $6, $13, $21}' >c.l.d.file
else if ("$lattice" == "tet") then
    echo "#Volume energy  C11 C12 C13 C33 C44 C66"
    sort -k 1 -n t.m.p.file | awk '{printf "%10.6lf %11.6lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf\n", $1, $2, $4, $5, $6, $13, $21, $16}' >c.l.d.file
else if ("$lattice" == "ort") then
    echo "#Volume energy  C11 C12 C13 C22 C23 C33 C44 C55 C66"
    sort -k 1 -n t.m.p.file | awk '{printf "%10.6lf %11.6lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf\n", $1, $2, $4, $5, $6, $12, $13, $20, $28, $29, $30}' >c.l.d.file
else if ("$lattice" == "mon") then
    echo "#Volume energy  C11 C12 C13 C16 C22 C23 C26 C33 C36 C44 C45 C55 C66"
    sort -k 1 -n t.m.p.file | awk '{printf "%10.6lf %11.6lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf\n", $1, $2, $4, $5, $6, $9, $12, $13, $16, $20, $23, $28, $29, $36, $37}' >c.l.d.file
else if ("$lattice" == "tri") then
    echo "#Volume energy  C11 C12 C13 C14 C15 C16 C22 C23 C24 C25 C26 C33 C34 C35 C36 C44 C45 C46 C55 C56 C66"
    sort -k 1 -n t.m.p.file | awk '{printf "%10.6lf %11.6lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf %10.4lf\n", $1, $2, $4, $5, $6, $7, $8, $9, $12, $13, $14, $15, $16, $20, $21, $22, $23, $28, $29, $30, $36, $37, $44}' >c.l.d.file
endif

#set pp = `pwd`
#set ppx = $pp:t
#if ( ! ( -e E/thermo-E$ppx/vdos_e_fvib ) ) set itst = 1
if ($?WARNING) then
    echo "******** WARNING! Calculations are not completed yet!"
endif

unalias ls

#set line = `ls $TVfile`
#if ( "$status" != "0" ) then
#  if ( "$ECmode" == "semi_phonon" ) set ECmode = "v0"
#endif

if ( -e $TVfile ) then
  set line = `ls $TVfile`
else if ( "$ECmode" == "semi_phonon" ) then
  set ECmode = "v0"
endif

set vols = `awk '{print $1}' c.l.d.file`

echo -n >c.l.d.fileP
foreach v ( $vols )
  set der = `YWfit -BMvol -calder $v <c.l.d.file | grep "fvalue = " | grep "deriv = " | awk '{print $6}'`
  echo $v $der >>  c.l.d.fileP
end

echo -n >c.l.d.fileB
foreach v ( $vols )
  set der = `YWfit -BMvol -calder $v <c.l.d.fileP | grep "fvalue = " | grep "deriv = " | awk '{print $6}'`
  set derB = `ari -n -f %08.3f $v x $der x $UtoGPa`
  printf "%10.3lf\n" "$derB" >> c.l.d.fileB
end

paste c.l.d.file c.l.d.fileB >c.l.d.fileP
rm c.l.d.fileB
mv c.l.d.fileP c.l.d.file

set nvol = `wc -l c.l.d.file | awk '{print $1}'`
if ( "$ECmode" == "semi_phonon" ) then
    atatCLD <$line -$lattice c.l.d.file
else if ( "$ECmode" == "test" ) then
    if ( "$nvol" != "0" ) atatCLD -$lattice c.l.d.file -test
else if ( "$ECmode" == "v0" ) then
    set vmin = `YWfit -BMvol -calmin <c.l.d.file | grep "Optimized xmin= " | awk '{print $3}'`
    if ( "$nvol" != "0" ) atatCLD -$lattice c.l.d.file -v0 $vmin
endif
\rm t.m.p.str
\rm t.m.p.file

